# coding: utf-8

"""
    Appwrite

    Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)

    The version of the OpenAPI document: 1.5.0
    Contact: team@appwrite.io
    Created by: https://appwrite.io/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from appwrite_console_python_sdk import schemas  # noqa: F401


class ProjectsCreatePlatformRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "name",
            "type",
        }
        
        class properties:
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def WEB(cls):
                    return cls("web")
                
                @schemas.classproperty
                def FLUTTERWEB(cls):
                    return cls("flutter-web")
                
                @schemas.classproperty
                def FLUTTERIOS(cls):
                    return cls("flutter-ios")
                
                @schemas.classproperty
                def FLUTTERANDROID(cls):
                    return cls("flutter-android")
                
                @schemas.classproperty
                def FLUTTERLINUX(cls):
                    return cls("flutter-linux")
                
                @schemas.classproperty
                def FLUTTERMACOS(cls):
                    return cls("flutter-macos")
                
                @schemas.classproperty
                def FLUTTERWINDOWS(cls):
                    return cls("flutter-windows")
                
                @schemas.classproperty
                def APPLEIOS(cls):
                    return cls("apple-ios")
                
                @schemas.classproperty
                def APPLEMACOS(cls):
                    return cls("apple-macos")
                
                @schemas.classproperty
                def APPLEWATCHOS(cls):
                    return cls("apple-watchos")
                
                @schemas.classproperty
                def APPLETVOS(cls):
                    return cls("apple-tvos")
                
                @schemas.classproperty
                def ANDROID(cls):
                    return cls("android")
                
                @schemas.classproperty
                def UNITY(cls):
                    return cls("unity")
            name = schemas.StrSchema
            key = schemas.StrSchema
            store = schemas.StrSchema
            hostname = schemas.StrSchema
            __annotations__ = {
                "type": type,
                "name": name,
                "key": key,
                "store": store,
                "hostname": hostname,
            }
    
    name: MetaOapg.properties.name
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["key"]) -> MetaOapg.properties.key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["store"]) -> MetaOapg.properties.store: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hostname"]) -> MetaOapg.properties.hostname: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "name", "key", "store", "hostname", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["key"]) -> typing.Union[MetaOapg.properties.key, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["store"]) -> typing.Union[MetaOapg.properties.store, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hostname"]) -> typing.Union[MetaOapg.properties.hostname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "name", "key", "store", "hostname", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        key: typing.Union[MetaOapg.properties.key, str, schemas.Unset] = schemas.unset,
        store: typing.Union[MetaOapg.properties.store, str, schemas.Unset] = schemas.unset,
        hostname: typing.Union[MetaOapg.properties.hostname, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProjectsCreatePlatformRequest':
        return super().__new__(
            cls,
            *args,
            name=name,
            type=type,
            key=key,
            store=store,
            hostname=hostname,
            _configuration=_configuration,
            **kwargs,
        )
