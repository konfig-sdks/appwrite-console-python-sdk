# coding: utf-8

"""
    Appwrite

    Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)

    The version of the OpenAPI document: 1.5.0
    Contact: team@appwrite.io
    Created by: https://appwrite.io/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from appwrite_console_python_sdk import schemas  # noqa: F401


class ProjectsUpdateServiceStatusRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "service",
            "status",
        }
        
        class properties:
            
            
            class service(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "account": "ACCOUNT",
                        "avatars": "AVATARS",
                        "databases": "DATABASES",
                        "locale": "LOCALE",
                        "health": "HEALTH",
                        "storage": "STORAGE",
                        "teams": "TEAMS",
                        "users": "USERS",
                        "functions": "FUNCTIONS",
                        "graphql": "GRAPHQL",
                        "messaging": "MESSAGING",
                    }
                
                @schemas.classproperty
                def ACCOUNT(cls):
                    return cls("account")
                
                @schemas.classproperty
                def AVATARS(cls):
                    return cls("avatars")
                
                @schemas.classproperty
                def DATABASES(cls):
                    return cls("databases")
                
                @schemas.classproperty
                def LOCALE(cls):
                    return cls("locale")
                
                @schemas.classproperty
                def HEALTH(cls):
                    return cls("health")
                
                @schemas.classproperty
                def STORAGE(cls):
                    return cls("storage")
                
                @schemas.classproperty
                def TEAMS(cls):
                    return cls("teams")
                
                @schemas.classproperty
                def USERS(cls):
                    return cls("users")
                
                @schemas.classproperty
                def FUNCTIONS(cls):
                    return cls("functions")
                
                @schemas.classproperty
                def GRAPHQL(cls):
                    return cls("graphql")
                
                @schemas.classproperty
                def MESSAGING(cls):
                    return cls("messaging")
            status = schemas.BoolSchema
            __annotations__ = {
                "service": service,
                "status": status,
            }
    
    service: MetaOapg.properties.service
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["service"]) -> MetaOapg.properties.service: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["service", "status", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["service"]) -> MetaOapg.properties.service: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["service", "status", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        service: typing.Union[MetaOapg.properties.service, str, ],
        status: typing.Union[MetaOapg.properties.status, bool, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProjectsUpdateServiceStatusRequest':
        return super().__new__(
            cls,
            *args,
            service=service,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )
