# coding: utf-8

"""
    Appwrite

    Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)

    The version of the OpenAPI document: 1.5.0
    Contact: team@appwrite.io
    Created by: https://appwrite.io/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from appwrite_console_python_sdk import schemas  # noqa: F401


class UsageFunctions(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    UsageFunctions
    """


    class MetaOapg:
        required = {
            "deploymentsStorageTotal",
            "executionsTotal",
            "buildsStorageTotal",
            "functions",
            "executionsTimeTotal",
            "functionsTotal",
            "range",
            "executionsTime",
            "buildsTimeTotal",
            "buildsTotal",
            "deployments",
            "deploymentsTotal",
            "buildsTime",
            "executions",
            "deploymentsStorage",
            "builds",
            "buildsStorage",
        }
        
        class properties:
            range = schemas.StrSchema
            functionsTotal = schemas.Int32Schema
            deploymentsTotal = schemas.Int32Schema
            deploymentsStorageTotal = schemas.Int32Schema
            buildsTotal = schemas.Int32Schema
            buildsStorageTotal = schemas.Int32Schema
            buildsTimeTotal = schemas.Int32Schema
            executionsTotal = schemas.Int32Schema
            executionsTimeTotal = schemas.Int32Schema
            
            
            class functions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Metric']:
                        return Metric
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Metric'], typing.List['Metric']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'functions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Metric':
                    return super().__getitem__(i)
            
            
            class deployments(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Metric']:
                        return Metric
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Metric'], typing.List['Metric']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'deployments':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Metric':
                    return super().__getitem__(i)
            
            
            class deploymentsStorage(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Metric']:
                        return Metric
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Metric'], typing.List['Metric']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'deploymentsStorage':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Metric':
                    return super().__getitem__(i)
            
            
            class builds(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Metric']:
                        return Metric
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Metric'], typing.List['Metric']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'builds':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Metric':
                    return super().__getitem__(i)
            
            
            class buildsStorage(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Metric']:
                        return Metric
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Metric'], typing.List['Metric']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'buildsStorage':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Metric':
                    return super().__getitem__(i)
            
            
            class buildsTime(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Metric']:
                        return Metric
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Metric'], typing.List['Metric']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'buildsTime':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Metric':
                    return super().__getitem__(i)
            
            
            class executions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Metric']:
                        return Metric
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Metric'], typing.List['Metric']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'executions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Metric':
                    return super().__getitem__(i)
            
            
            class executionsTime(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Metric']:
                        return Metric
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Metric'], typing.List['Metric']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'executionsTime':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Metric':
                    return super().__getitem__(i)
            __annotations__ = {
                "range": range,
                "functionsTotal": functionsTotal,
                "deploymentsTotal": deploymentsTotal,
                "deploymentsStorageTotal": deploymentsStorageTotal,
                "buildsTotal": buildsTotal,
                "buildsStorageTotal": buildsStorageTotal,
                "buildsTimeTotal": buildsTimeTotal,
                "executionsTotal": executionsTotal,
                "executionsTimeTotal": executionsTimeTotal,
                "functions": functions,
                "deployments": deployments,
                "deploymentsStorage": deploymentsStorage,
                "builds": builds,
                "buildsStorage": buildsStorage,
                "buildsTime": buildsTime,
                "executions": executions,
                "executionsTime": executionsTime,
            }
    
    deploymentsStorageTotal: MetaOapg.properties.deploymentsStorageTotal
    executionsTotal: MetaOapg.properties.executionsTotal
    buildsStorageTotal: MetaOapg.properties.buildsStorageTotal
    functions: MetaOapg.properties.functions
    executionsTimeTotal: MetaOapg.properties.executionsTimeTotal
    functionsTotal: MetaOapg.properties.functionsTotal
    range: MetaOapg.properties.range
    executionsTime: MetaOapg.properties.executionsTime
    buildsTimeTotal: MetaOapg.properties.buildsTimeTotal
    buildsTotal: MetaOapg.properties.buildsTotal
    deployments: MetaOapg.properties.deployments
    deploymentsTotal: MetaOapg.properties.deploymentsTotal
    buildsTime: MetaOapg.properties.buildsTime
    executions: MetaOapg.properties.executions
    deploymentsStorage: MetaOapg.properties.deploymentsStorage
    builds: MetaOapg.properties.builds
    buildsStorage: MetaOapg.properties.buildsStorage
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["range"]) -> MetaOapg.properties.range: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["functionsTotal"]) -> MetaOapg.properties.functionsTotal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deploymentsTotal"]) -> MetaOapg.properties.deploymentsTotal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deploymentsStorageTotal"]) -> MetaOapg.properties.deploymentsStorageTotal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["buildsTotal"]) -> MetaOapg.properties.buildsTotal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["buildsStorageTotal"]) -> MetaOapg.properties.buildsStorageTotal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["buildsTimeTotal"]) -> MetaOapg.properties.buildsTimeTotal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["executionsTotal"]) -> MetaOapg.properties.executionsTotal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["executionsTimeTotal"]) -> MetaOapg.properties.executionsTimeTotal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["functions"]) -> MetaOapg.properties.functions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deployments"]) -> MetaOapg.properties.deployments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deploymentsStorage"]) -> MetaOapg.properties.deploymentsStorage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["builds"]) -> MetaOapg.properties.builds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["buildsStorage"]) -> MetaOapg.properties.buildsStorage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["buildsTime"]) -> MetaOapg.properties.buildsTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["executions"]) -> MetaOapg.properties.executions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["executionsTime"]) -> MetaOapg.properties.executionsTime: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["range", "functionsTotal", "deploymentsTotal", "deploymentsStorageTotal", "buildsTotal", "buildsStorageTotal", "buildsTimeTotal", "executionsTotal", "executionsTimeTotal", "functions", "deployments", "deploymentsStorage", "builds", "buildsStorage", "buildsTime", "executions", "executionsTime", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["range"]) -> MetaOapg.properties.range: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["functionsTotal"]) -> MetaOapg.properties.functionsTotal: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deploymentsTotal"]) -> MetaOapg.properties.deploymentsTotal: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deploymentsStorageTotal"]) -> MetaOapg.properties.deploymentsStorageTotal: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["buildsTotal"]) -> MetaOapg.properties.buildsTotal: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["buildsStorageTotal"]) -> MetaOapg.properties.buildsStorageTotal: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["buildsTimeTotal"]) -> MetaOapg.properties.buildsTimeTotal: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["executionsTotal"]) -> MetaOapg.properties.executionsTotal: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["executionsTimeTotal"]) -> MetaOapg.properties.executionsTimeTotal: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["functions"]) -> MetaOapg.properties.functions: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deployments"]) -> MetaOapg.properties.deployments: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deploymentsStorage"]) -> MetaOapg.properties.deploymentsStorage: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["builds"]) -> MetaOapg.properties.builds: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["buildsStorage"]) -> MetaOapg.properties.buildsStorage: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["buildsTime"]) -> MetaOapg.properties.buildsTime: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["executions"]) -> MetaOapg.properties.executions: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["executionsTime"]) -> MetaOapg.properties.executionsTime: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["range", "functionsTotal", "deploymentsTotal", "deploymentsStorageTotal", "buildsTotal", "buildsStorageTotal", "buildsTimeTotal", "executionsTotal", "executionsTimeTotal", "functions", "deployments", "deploymentsStorage", "builds", "buildsStorage", "buildsTime", "executions", "executionsTime", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        deploymentsStorageTotal: typing.Union[MetaOapg.properties.deploymentsStorageTotal, decimal.Decimal, int, ],
        executionsTotal: typing.Union[MetaOapg.properties.executionsTotal, decimal.Decimal, int, ],
        buildsStorageTotal: typing.Union[MetaOapg.properties.buildsStorageTotal, decimal.Decimal, int, ],
        functions: typing.Union[MetaOapg.properties.functions, list, tuple, ],
        executionsTimeTotal: typing.Union[MetaOapg.properties.executionsTimeTotal, decimal.Decimal, int, ],
        functionsTotal: typing.Union[MetaOapg.properties.functionsTotal, decimal.Decimal, int, ],
        range: typing.Union[MetaOapg.properties.range, str, ],
        executionsTime: typing.Union[MetaOapg.properties.executionsTime, list, tuple, ],
        buildsTimeTotal: typing.Union[MetaOapg.properties.buildsTimeTotal, decimal.Decimal, int, ],
        buildsTotal: typing.Union[MetaOapg.properties.buildsTotal, decimal.Decimal, int, ],
        deployments: typing.Union[MetaOapg.properties.deployments, list, tuple, ],
        deploymentsTotal: typing.Union[MetaOapg.properties.deploymentsTotal, decimal.Decimal, int, ],
        buildsTime: typing.Union[MetaOapg.properties.buildsTime, list, tuple, ],
        executions: typing.Union[MetaOapg.properties.executions, list, tuple, ],
        deploymentsStorage: typing.Union[MetaOapg.properties.deploymentsStorage, list, tuple, ],
        builds: typing.Union[MetaOapg.properties.builds, list, tuple, ],
        buildsStorage: typing.Union[MetaOapg.properties.buildsStorage, list, tuple, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UsageFunctions':
        return super().__new__(
            cls,
            *args,
            deploymentsStorageTotal=deploymentsStorageTotal,
            executionsTotal=executionsTotal,
            buildsStorageTotal=buildsStorageTotal,
            functions=functions,
            executionsTimeTotal=executionsTimeTotal,
            functionsTotal=functionsTotal,
            range=range,
            executionsTime=executionsTime,
            buildsTimeTotal=buildsTimeTotal,
            buildsTotal=buildsTotal,
            deployments=deployments,
            deploymentsTotal=deploymentsTotal,
            buildsTime=buildsTime,
            executions=executions,
            deploymentsStorage=deploymentsStorage,
            builds=builds,
            buildsStorage=buildsStorage,
            _configuration=_configuration,
            **kwargs,
        )

from appwrite_console_python_sdk.model.metric import Metric
