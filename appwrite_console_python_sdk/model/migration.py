# coding: utf-8

"""
    Appwrite

    Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)

    The version of the OpenAPI document: 1.5.0
    Contact: team@appwrite.io
    Created by: https://appwrite.io/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from appwrite_console_python_sdk import schemas  # noqa: F401


class Migration(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Migration
    """


    class MetaOapg:
        required = {
            "stage",
            "statusCounters",
            "resourceData",
            "$createdAt",
            "resources",
            "source",
            "errors",
            "$id",
            "$updatedAt",
            "status",
        }
        
        class properties:
            id = schemas.StrSchema
            created_at = schemas.StrSchema
            updated_at = schemas.StrSchema
            status = schemas.StrSchema
            stage = schemas.StrSchema
            source = schemas.StrSchema
        
            @staticmethod
            def resources() -> typing.Type['MigrationResources']:
                return MigrationResources
            statusCounters = schemas.DictSchema
            resourceData = schemas.DictSchema
        
            @staticmethod
            def errors() -> typing.Type['MigrationErrors']:
                return MigrationErrors
            __annotations__ = {
                "$id": id,
                "$createdAt": created_at,
                "$updatedAt": updated_at,
                "status": status,
                "stage": stage,
                "source": source,
                "resources": resources,
                "statusCounters": statusCounters,
                "resourceData": resourceData,
                "errors": errors,
            }
    
    stage: MetaOapg.properties.stage
    statusCounters: MetaOapg.properties.statusCounters
    resourceData: MetaOapg.properties.resourceData
    resources: 'MigrationResources'
    source: MetaOapg.properties.source
    errors: 'MigrationErrors'
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["$id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["$createdAt"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["$updatedAt"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stage"]) -> MetaOapg.properties.stage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resources"]) -> 'MigrationResources': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statusCounters"]) -> MetaOapg.properties.statusCounters: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resourceData"]) -> MetaOapg.properties.resourceData: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["errors"]) -> 'MigrationErrors': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["$id", "$createdAt", "$updatedAt", "status", "stage", "source", "resources", "statusCounters", "resourceData", "errors", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["$id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["$createdAt"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["$updatedAt"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stage"]) -> MetaOapg.properties.stage: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resources"]) -> 'MigrationResources': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statusCounters"]) -> MetaOapg.properties.statusCounters: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resourceData"]) -> MetaOapg.properties.resourceData: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["errors"]) -> 'MigrationErrors': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["$id", "$createdAt", "$updatedAt", "status", "stage", "source", "resources", "statusCounters", "resourceData", "errors", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        stage: typing.Union[MetaOapg.properties.stage, str, ],
        statusCounters: typing.Union[MetaOapg.properties.statusCounters, dict, frozendict.frozendict, ],
        resourceData: typing.Union[MetaOapg.properties.resourceData, dict, frozendict.frozendict, ],
        resources: 'MigrationResources',
        source: typing.Union[MetaOapg.properties.source, str, ],
        errors: 'MigrationErrors',
        status: typing.Union[MetaOapg.properties.status, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Migration':
        return super().__new__(
            cls,
            *args,
            stage=stage,
            statusCounters=statusCounters,
            resourceData=resourceData,
            resources=resources,
            source=source,
            errors=errors,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )

from appwrite_console_python_sdk.model.migration_errors import MigrationErrors
from appwrite_console_python_sdk.model.migration_resources import MigrationResources
