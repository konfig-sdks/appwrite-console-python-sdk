# coding: utf-8

"""
    Appwrite

    Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)

    The version of the OpenAPI document: 1.5.0
    Contact: team@appwrite.io
    Created by: https://appwrite.io/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from appwrite_console_python_sdk import schemas  # noqa: F401


class Key(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Key
    """


    class MetaOapg:
        required = {
            "accessedAt",
            "expire",
            "name",
            "$createdAt",
            "scopes",
            "secret",
            "sdks",
            "$id",
            "$updatedAt",
        }
        
        class properties:
            id = schemas.StrSchema
            created_at = schemas.StrSchema
            updated_at = schemas.StrSchema
            name = schemas.StrSchema
            expire = schemas.StrSchema
        
            @staticmethod
            def scopes() -> typing.Type['KeyScopes']:
                return KeyScopes
            secret = schemas.StrSchema
            accessedAt = schemas.StrSchema
        
            @staticmethod
            def sdks() -> typing.Type['KeySdks']:
                return KeySdks
            __annotations__ = {
                "$id": id,
                "$createdAt": created_at,
                "$updatedAt": updated_at,
                "name": name,
                "expire": expire,
                "scopes": scopes,
                "secret": secret,
                "accessedAt": accessedAt,
                "sdks": sdks,
            }
    
    accessedAt: MetaOapg.properties.accessedAt
    expire: MetaOapg.properties.expire
    name: MetaOapg.properties.name
    scopes: 'KeyScopes'
    secret: MetaOapg.properties.secret
    sdks: 'KeySdks'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["$id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["$createdAt"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["$updatedAt"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expire"]) -> MetaOapg.properties.expire: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scopes"]) -> 'KeyScopes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secret"]) -> MetaOapg.properties.secret: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accessedAt"]) -> MetaOapg.properties.accessedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sdks"]) -> 'KeySdks': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["$id", "$createdAt", "$updatedAt", "name", "expire", "scopes", "secret", "accessedAt", "sdks", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["$id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["$createdAt"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["$updatedAt"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expire"]) -> MetaOapg.properties.expire: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scopes"]) -> 'KeyScopes': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secret"]) -> MetaOapg.properties.secret: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accessedAt"]) -> MetaOapg.properties.accessedAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sdks"]) -> 'KeySdks': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["$id", "$createdAt", "$updatedAt", "name", "expire", "scopes", "secret", "accessedAt", "sdks", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        accessedAt: typing.Union[MetaOapg.properties.accessedAt, str, ],
        expire: typing.Union[MetaOapg.properties.expire, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        scopes: 'KeyScopes',
        secret: typing.Union[MetaOapg.properties.secret, str, ],
        sdks: 'KeySdks',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Key':
        return super().__new__(
            cls,
            *args,
            accessedAt=accessedAt,
            expire=expire,
            name=name,
            scopes=scopes,
            secret=secret,
            sdks=sdks,
            _configuration=_configuration,
            **kwargs,
        )

from appwrite_console_python_sdk.model.key_scopes import KeyScopes
from appwrite_console_python_sdk.model.key_sdks import KeySdks
