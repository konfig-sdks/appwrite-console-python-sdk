# coding: utf-8

"""
    Appwrite

    Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)

    The version of the OpenAPI document: 1.5.0
    Contact: team@appwrite.io
    Created by: https://appwrite.io/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from appwrite_console_python_sdk import schemas  # noqa: F401


class UsageDatabases(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    UsageDatabases
    """


    class MetaOapg:
        required = {
            "databases",
            "databasesTotal",
            "collections",
            "documents",
            "documentsTotal",
            "range",
            "collectionsTotal",
        }
        
        class properties:
            range = schemas.StrSchema
            databasesTotal = schemas.Int32Schema
            collectionsTotal = schemas.Int32Schema
            documentsTotal = schemas.Int32Schema
            
            
            class databases(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Metric']:
                        return Metric
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Metric'], typing.List['Metric']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'databases':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Metric':
                    return super().__getitem__(i)
            
            
            class collections(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Metric']:
                        return Metric
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Metric'], typing.List['Metric']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'collections':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Metric':
                    return super().__getitem__(i)
            
            
            class documents(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Metric']:
                        return Metric
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Metric'], typing.List['Metric']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'documents':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Metric':
                    return super().__getitem__(i)
            __annotations__ = {
                "range": range,
                "databasesTotal": databasesTotal,
                "collectionsTotal": collectionsTotal,
                "documentsTotal": documentsTotal,
                "databases": databases,
                "collections": collections,
                "documents": documents,
            }
    
    databases: MetaOapg.properties.databases
    databasesTotal: MetaOapg.properties.databasesTotal
    collections: MetaOapg.properties.collections
    documents: MetaOapg.properties.documents
    documentsTotal: MetaOapg.properties.documentsTotal
    range: MetaOapg.properties.range
    collectionsTotal: MetaOapg.properties.collectionsTotal
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["range"]) -> MetaOapg.properties.range: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["databasesTotal"]) -> MetaOapg.properties.databasesTotal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["collectionsTotal"]) -> MetaOapg.properties.collectionsTotal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["documentsTotal"]) -> MetaOapg.properties.documentsTotal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["databases"]) -> MetaOapg.properties.databases: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["collections"]) -> MetaOapg.properties.collections: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["documents"]) -> MetaOapg.properties.documents: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["range", "databasesTotal", "collectionsTotal", "documentsTotal", "databases", "collections", "documents", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["range"]) -> MetaOapg.properties.range: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["databasesTotal"]) -> MetaOapg.properties.databasesTotal: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["collectionsTotal"]) -> MetaOapg.properties.collectionsTotal: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["documentsTotal"]) -> MetaOapg.properties.documentsTotal: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["databases"]) -> MetaOapg.properties.databases: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["collections"]) -> MetaOapg.properties.collections: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["documents"]) -> MetaOapg.properties.documents: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["range", "databasesTotal", "collectionsTotal", "documentsTotal", "databases", "collections", "documents", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        databases: typing.Union[MetaOapg.properties.databases, list, tuple, ],
        databasesTotal: typing.Union[MetaOapg.properties.databasesTotal, decimal.Decimal, int, ],
        collections: typing.Union[MetaOapg.properties.collections, list, tuple, ],
        documents: typing.Union[MetaOapg.properties.documents, list, tuple, ],
        documentsTotal: typing.Union[MetaOapg.properties.documentsTotal, decimal.Decimal, int, ],
        range: typing.Union[MetaOapg.properties.range, str, ],
        collectionsTotal: typing.Union[MetaOapg.properties.collectionsTotal, decimal.Decimal, int, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UsageDatabases':
        return super().__new__(
            cls,
            *args,
            databases=databases,
            databasesTotal=databasesTotal,
            collections=collections,
            documents=documents,
            documentsTotal=documentsTotal,
            range=range,
            collectionsTotal=collectionsTotal,
            _configuration=_configuration,
            **kwargs,
        )

from appwrite_console_python_sdk.model.metric import Metric
