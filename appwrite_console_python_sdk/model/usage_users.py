# coding: utf-8

"""
    Appwrite

    Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)

    The version of the OpenAPI document: 1.5.0
    Contact: team@appwrite.io
    Created by: https://appwrite.io/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from appwrite_console_python_sdk import schemas  # noqa: F401


class UsageUsers(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    UsageUsers
    """


    class MetaOapg:
        required = {
            "usersTotal",
            "sessions",
            "range",
            "sessionsTotal",
            "users",
        }
        
        class properties:
            range = schemas.StrSchema
            usersTotal = schemas.Int32Schema
            sessionsTotal = schemas.Int32Schema
            
            
            class users(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Metric']:
                        return Metric
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Metric'], typing.List['Metric']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'users':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Metric':
                    return super().__getitem__(i)
            
            
            class sessions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Metric']:
                        return Metric
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Metric'], typing.List['Metric']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sessions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Metric':
                    return super().__getitem__(i)
            __annotations__ = {
                "range": range,
                "usersTotal": usersTotal,
                "sessionsTotal": sessionsTotal,
                "users": users,
                "sessions": sessions,
            }
    
    usersTotal: MetaOapg.properties.usersTotal
    sessions: MetaOapg.properties.sessions
    range: MetaOapg.properties.range
    sessionsTotal: MetaOapg.properties.sessionsTotal
    users: MetaOapg.properties.users
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["range"]) -> MetaOapg.properties.range: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usersTotal"]) -> MetaOapg.properties.usersTotal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sessionsTotal"]) -> MetaOapg.properties.sessionsTotal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["users"]) -> MetaOapg.properties.users: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sessions"]) -> MetaOapg.properties.sessions: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["range", "usersTotal", "sessionsTotal", "users", "sessions", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["range"]) -> MetaOapg.properties.range: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usersTotal"]) -> MetaOapg.properties.usersTotal: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sessionsTotal"]) -> MetaOapg.properties.sessionsTotal: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["users"]) -> MetaOapg.properties.users: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sessions"]) -> MetaOapg.properties.sessions: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["range", "usersTotal", "sessionsTotal", "users", "sessions", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        usersTotal: typing.Union[MetaOapg.properties.usersTotal, decimal.Decimal, int, ],
        sessions: typing.Union[MetaOapg.properties.sessions, list, tuple, ],
        range: typing.Union[MetaOapg.properties.range, str, ],
        sessionsTotal: typing.Union[MetaOapg.properties.sessionsTotal, decimal.Decimal, int, ],
        users: typing.Union[MetaOapg.properties.users, list, tuple, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UsageUsers':
        return super().__new__(
            cls,
            *args,
            usersTotal=usersTotal,
            sessions=sessions,
            range=range,
            sessionsTotal=sessionsTotal,
            users=users,
            _configuration=_configuration,
            **kwargs,
        )

from appwrite_console_python_sdk.model.metric import Metric
