# coding: utf-8

"""
    Appwrite

    Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)

    The version of the OpenAPI document: 1.5.0
    Contact: team@appwrite.io
    Created by: https://appwrite.io/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from appwrite_console_python_sdk import schemas  # noqa: F401


class EmailTemplate(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    EmailTemplate
    """


    class MetaOapg:
        required = {
            "senderName",
            "subject",
            "senderEmail",
            "replyTo",
            "locale",
            "message",
            "type",
        }
        
        class properties:
            type = schemas.StrSchema
            locale = schemas.StrSchema
            message = schemas.StrSchema
            senderName = schemas.StrSchema
            senderEmail = schemas.StrSchema
            replyTo = schemas.StrSchema
            subject = schemas.StrSchema
            __annotations__ = {
                "type": type,
                "locale": locale,
                "message": message,
                "senderName": senderName,
                "senderEmail": senderEmail,
                "replyTo": replyTo,
                "subject": subject,
            }
    
    senderName: MetaOapg.properties.senderName
    subject: MetaOapg.properties.subject
    senderEmail: MetaOapg.properties.senderEmail
    replyTo: MetaOapg.properties.replyTo
    locale: MetaOapg.properties.locale
    message: MetaOapg.properties.message
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locale"]) -> MetaOapg.properties.locale: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["senderName"]) -> MetaOapg.properties.senderName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["senderEmail"]) -> MetaOapg.properties.senderEmail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["replyTo"]) -> MetaOapg.properties.replyTo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subject"]) -> MetaOapg.properties.subject: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "locale", "message", "senderName", "senderEmail", "replyTo", "subject", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locale"]) -> MetaOapg.properties.locale: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["senderName"]) -> MetaOapg.properties.senderName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["senderEmail"]) -> MetaOapg.properties.senderEmail: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["replyTo"]) -> MetaOapg.properties.replyTo: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subject"]) -> MetaOapg.properties.subject: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "locale", "message", "senderName", "senderEmail", "replyTo", "subject", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        senderName: typing.Union[MetaOapg.properties.senderName, str, ],
        subject: typing.Union[MetaOapg.properties.subject, str, ],
        senderEmail: typing.Union[MetaOapg.properties.senderEmail, str, ],
        replyTo: typing.Union[MetaOapg.properties.replyTo, str, ],
        locale: typing.Union[MetaOapg.properties.locale, str, ],
        message: typing.Union[MetaOapg.properties.message, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EmailTemplate':
        return super().__new__(
            cls,
            *args,
            senderName=senderName,
            subject=subject,
            senderEmail=senderEmail,
            replyTo=replyTo,
            locale=locale,
            message=message,
            type=type,
            _configuration=_configuration,
            **kwargs,
        )
