# coding: utf-8

"""
    Appwrite

    Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)

    The version of the OpenAPI document: 1.5.0
    Contact: team@appwrite.io
    Created by: https://appwrite.io/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from appwrite_console_python_sdk import schemas  # noqa: F401


class MigrationReport(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Migration Report
    """


    class MetaOapg:
        required = {
            "bucket",
            "database",
            "file",
            "size",
            "document",
            "function",
            "team",
            "user",
            "version",
        }
        
        class properties:
            version = schemas.StrSchema
            user = schemas.Int32Schema
            team = schemas.Int32Schema
            database = schemas.Int32Schema
            document = schemas.Int32Schema
            file = schemas.Int32Schema
            bucket = schemas.Int32Schema
            function = schemas.Int32Schema
            size = schemas.Int32Schema
            __annotations__ = {
                "version": version,
                "user": user,
                "team": team,
                "database": database,
                "document": document,
                "file": file,
                "bucket": bucket,
                "function": function,
                "size": size,
            }
    
    bucket: MetaOapg.properties.bucket
    database: MetaOapg.properties.database
    file: MetaOapg.properties.file
    size: MetaOapg.properties.size
    document: MetaOapg.properties.document
    function: MetaOapg.properties.function
    team: MetaOapg.properties.team
    user: MetaOapg.properties.user
    version: MetaOapg.properties.version
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> MetaOapg.properties.user: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["team"]) -> MetaOapg.properties.team: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["database"]) -> MetaOapg.properties.database: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["document"]) -> MetaOapg.properties.document: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["file"]) -> MetaOapg.properties.file: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bucket"]) -> MetaOapg.properties.bucket: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["function"]) -> MetaOapg.properties.function: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["size"]) -> MetaOapg.properties.size: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["version", "user", "team", "database", "document", "file", "bucket", "function", "size", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> MetaOapg.properties.user: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["team"]) -> MetaOapg.properties.team: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["database"]) -> MetaOapg.properties.database: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["document"]) -> MetaOapg.properties.document: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["file"]) -> MetaOapg.properties.file: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bucket"]) -> MetaOapg.properties.bucket: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["function"]) -> MetaOapg.properties.function: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["size"]) -> MetaOapg.properties.size: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["version", "user", "team", "database", "document", "file", "bucket", "function", "size", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        bucket: typing.Union[MetaOapg.properties.bucket, decimal.Decimal, int, ],
        database: typing.Union[MetaOapg.properties.database, decimal.Decimal, int, ],
        file: typing.Union[MetaOapg.properties.file, decimal.Decimal, int, ],
        size: typing.Union[MetaOapg.properties.size, decimal.Decimal, int, ],
        document: typing.Union[MetaOapg.properties.document, decimal.Decimal, int, ],
        function: typing.Union[MetaOapg.properties.function, decimal.Decimal, int, ],
        team: typing.Union[MetaOapg.properties.team, decimal.Decimal, int, ],
        user: typing.Union[MetaOapg.properties.user, decimal.Decimal, int, ],
        version: typing.Union[MetaOapg.properties.version, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MigrationReport':
        return super().__new__(
            cls,
            *args,
            bucket=bucket,
            database=database,
            file=file,
            size=size,
            document=document,
            function=function,
            team=team,
            user=user,
            version=version,
            _configuration=_configuration,
            **kwargs,
        )
