# coding: utf-8

"""
    Appwrite

    Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)

    The version of the OpenAPI document: 1.5.0
    Contact: team@appwrite.io
    Created by: https://appwrite.io/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from appwrite_console_python_sdk import schemas  # noqa: F401


class ConsoleVariables(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Console Variables
    """


    class MetaOapg:
        required = {
            "_APP_DOMAIN_TARGET",
            "_APP_VCS_ENABLED",
            "_APP_DOMAIN_ENABLED",
            "_APP_FUNCTIONS_SIZE_LIMIT",
            "_APP_ASSISTANT_ENABLED",
            "_APP_STORAGE_LIMIT",
            "_APP_USAGE_STATS",
        }
        
        class properties:
            _APP_DOMAIN_TARGET = schemas.StrSchema
            _APP_STORAGE_LIMIT = schemas.Int32Schema
            _APP_FUNCTIONS_SIZE_LIMIT = schemas.Int32Schema
            _APP_USAGE_STATS = schemas.StrSchema
            _APP_VCS_ENABLED = schemas.BoolSchema
            _APP_DOMAIN_ENABLED = schemas.BoolSchema
            _APP_ASSISTANT_ENABLED = schemas.BoolSchema
            __annotations__ = {
                "_APP_DOMAIN_TARGET": _APP_DOMAIN_TARGET,
                "_APP_STORAGE_LIMIT": _APP_STORAGE_LIMIT,
                "_APP_FUNCTIONS_SIZE_LIMIT": _APP_FUNCTIONS_SIZE_LIMIT,
                "_APP_USAGE_STATS": _APP_USAGE_STATS,
                "_APP_VCS_ENABLED": _APP_VCS_ENABLED,
                "_APP_DOMAIN_ENABLED": _APP_DOMAIN_ENABLED,
                "_APP_ASSISTANT_ENABLED": _APP_ASSISTANT_ENABLED,
            }
    
    _APP_DOMAIN_TARGET: MetaOapg.properties._APP_DOMAIN_TARGET
    _APP_VCS_ENABLED: MetaOapg.properties._APP_VCS_ENABLED
    _APP_DOMAIN_ENABLED: MetaOapg.properties._APP_DOMAIN_ENABLED
    _APP_FUNCTIONS_SIZE_LIMIT: MetaOapg.properties._APP_FUNCTIONS_SIZE_LIMIT
    _APP_ASSISTANT_ENABLED: MetaOapg.properties._APP_ASSISTANT_ENABLED
    _APP_STORAGE_LIMIT: MetaOapg.properties._APP_STORAGE_LIMIT
    _APP_USAGE_STATS: MetaOapg.properties._APP_USAGE_STATS
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["_APP_DOMAIN_TARGET"]) -> MetaOapg.properties._APP_DOMAIN_TARGET: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["_APP_STORAGE_LIMIT"]) -> MetaOapg.properties._APP_STORAGE_LIMIT: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["_APP_FUNCTIONS_SIZE_LIMIT"]) -> MetaOapg.properties._APP_FUNCTIONS_SIZE_LIMIT: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["_APP_USAGE_STATS"]) -> MetaOapg.properties._APP_USAGE_STATS: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["_APP_VCS_ENABLED"]) -> MetaOapg.properties._APP_VCS_ENABLED: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["_APP_DOMAIN_ENABLED"]) -> MetaOapg.properties._APP_DOMAIN_ENABLED: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["_APP_ASSISTANT_ENABLED"]) -> MetaOapg.properties._APP_ASSISTANT_ENABLED: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["_APP_DOMAIN_TARGET", "_APP_STORAGE_LIMIT", "_APP_FUNCTIONS_SIZE_LIMIT", "_APP_USAGE_STATS", "_APP_VCS_ENABLED", "_APP_DOMAIN_ENABLED", "_APP_ASSISTANT_ENABLED", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["_APP_DOMAIN_TARGET"]) -> MetaOapg.properties._APP_DOMAIN_TARGET: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["_APP_STORAGE_LIMIT"]) -> MetaOapg.properties._APP_STORAGE_LIMIT: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["_APP_FUNCTIONS_SIZE_LIMIT"]) -> MetaOapg.properties._APP_FUNCTIONS_SIZE_LIMIT: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["_APP_USAGE_STATS"]) -> MetaOapg.properties._APP_USAGE_STATS: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["_APP_VCS_ENABLED"]) -> MetaOapg.properties._APP_VCS_ENABLED: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["_APP_DOMAIN_ENABLED"]) -> MetaOapg.properties._APP_DOMAIN_ENABLED: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["_APP_ASSISTANT_ENABLED"]) -> MetaOapg.properties._APP_ASSISTANT_ENABLED: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["_APP_DOMAIN_TARGET", "_APP_STORAGE_LIMIT", "_APP_FUNCTIONS_SIZE_LIMIT", "_APP_USAGE_STATS", "_APP_VCS_ENABLED", "_APP_DOMAIN_ENABLED", "_APP_ASSISTANT_ENABLED", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        _APP_DOMAIN_TARGET: typing.Union[MetaOapg.properties._APP_DOMAIN_TARGET, str, ],
        _APP_VCS_ENABLED: typing.Union[MetaOapg.properties._APP_VCS_ENABLED, bool, ],
        _APP_DOMAIN_ENABLED: typing.Union[MetaOapg.properties._APP_DOMAIN_ENABLED, bool, ],
        _APP_FUNCTIONS_SIZE_LIMIT: typing.Union[MetaOapg.properties._APP_FUNCTIONS_SIZE_LIMIT, decimal.Decimal, int, ],
        _APP_ASSISTANT_ENABLED: typing.Union[MetaOapg.properties._APP_ASSISTANT_ENABLED, bool, ],
        _APP_STORAGE_LIMIT: typing.Union[MetaOapg.properties._APP_STORAGE_LIMIT, decimal.Decimal, int, ],
        _APP_USAGE_STATS: typing.Union[MetaOapg.properties._APP_USAGE_STATS, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ConsoleVariables':
        return super().__new__(
            cls,
            *args,
            _APP_DOMAIN_TARGET=_APP_DOMAIN_TARGET,
            _APP_VCS_ENABLED=_APP_VCS_ENABLED,
            _APP_DOMAIN_ENABLED=_APP_DOMAIN_ENABLED,
            _APP_FUNCTIONS_SIZE_LIMIT=_APP_FUNCTIONS_SIZE_LIMIT,
            _APP_ASSISTANT_ENABLED=_APP_ASSISTANT_ENABLED,
            _APP_STORAGE_LIMIT=_APP_STORAGE_LIMIT,
            _APP_USAGE_STATS=_APP_USAGE_STATS,
            _configuration=_configuration,
            **kwargs,
        )
